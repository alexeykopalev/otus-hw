- name: Install the Packages
  yum:
    name:
      - pacemaker
      - pcs
      - fence-agents-all
      - lvm2-cluster
      - gfs2-utils
    state: present

- name: Start the pcs service
  service:
    name: "pcsd"
    state: started
    enabled: true

- name: Set the password for the use hacluster
  user:
    name: "{{ username }}"
    password: "{{ password | password_hash('sha512')}}"
    update_password: always

- name: Authenticate the cluster
  command: "pcs cluster auth {{ node1 }} {{ node2 }} {{ node3 }} -u {{ username }} -p {{ password }}"
#  register: auth_status
  run_once: true
      
# - name: Print the authorization status
#   debug:
#     msg: "{{ auth_status }}"
#   run_once: true

- name: Gather cluster status
  command: "pcs cluster status"
  register: cluster_status
  ignore_errors: true
    
- name: Setup the HA-Cluster
  command: "pcs cluster setup --name {{ cluster_name }} {{ node1 }} {{ node2 }} {{ node3 }}"
#  register: setup_status
  run_once: true
  when: cluster_status.rc | int != 0

# - name: Print the cluster setup output
#   debug:
#     msg: "{{ setup_status }}"
#   run_once: true

- name: Start the HA-Cluster
  command: "pcs cluster start --all"
#  register: start_status
  run_once: true
  when: cluster_status.rc | int != 0

# - name: Print the cluster start output
#   debug:
#     msg: "{{ start_status }}"
#   run_once: true

- name: Enable the HA-Cluster
  command: "pcs cluster enable --all"
#  register: enable_status
  run_once: true
  when: cluster_status.rc | int != 0

# - name: Print the cluster enable output
#   debug:
#     msg: "{{ enable_status }}"
#   run_once: true

- name: "Setting stonith-enabled=false"
  command: "pcs property set stonith-enabled=false"
  run_once: true

- name: "Setting 'No Quorum' Policy"
  command: "pcs property set no-quorum-policy=freeze"
  run_once: true

- name: "Creating 'clvmd' Resource"
  command: pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s on-fail=ignore clone interleave=true ordered=true
  run_once: true

- name: "Creating 'dlm' Resource"
  command: pcs resource create dlm systemd:dlm op monitor interval=30s on-fail=ignore clone interleave=true ordered=true
  run_once: true

- name: "Creating First Constraint"
  command: pcs constraint order start dlm-clone then clvmd-clone
  run_once: true

- name: "Creating Physical Volume"
  command: pvcreate /dev/sda #mapper/otusdisk
  run_once: true

- name: "Enable cluster lvm"
  command: lvmconf --enable-cluster

- name: "Creating Volume Group"
  command: vgcreate -Ay -cy cluster_vg /dev/sda #mapper/otusdisk
  run_once: true

- name: "Pause"
  pause:
    seconds: 30
  run_once: true

- name: "Creating Logical Volume"
  command: lvcreate -L10G -n cluster_lv cluster_vg
  run_once: true

- name: "Formatting Logical Volume With GFS2"
  command: mkfs.gfs2 -O -j3 -p lock_dlm -t otuscluster:gfs2 /dev/cluster_vg/cluster_lv
  run_once: true

- name: "Creating Cluster File System"
  command: pcs resource create clusterfs Filesystem \
   device="/dev/cluster_vg/cluster_lv" directory="/mnt/gfs2" \
   fstype="gfs2" "options=noatime" op monitor interval=10s \
   on-fail=ignore clone interleave=true
  run_once: true

- name: "Setting Starting Order Part 1"
  command: pcs constraint order start clvmd-clone then clusterfs-clone
  run_once: true

- name: "Setting Starting Order Part 2"
  command: pcs constraint colocation add clusterfs-clone with clvmd-clone
  run_once: true

- name: Gather cluster status
  command: "pcs cluster status"
  register: cluster_status

- name: Check and print the cluster Status
  debug:
    msg: "{{ cluster_status }}"
  run_once: true

- name: Gather resource status
  command: "pcs resource show"
  register: resource_status

- name: Check and print the cluster Status
  debug:
    msg: "{{ resource_status }}"
  run_once: true

